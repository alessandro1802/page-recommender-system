https://en.wikipedia.org/wiki/Ada_Semantic_Interface_Specification
The Ada Semantic Interface Specification (ASIS) is a layered, open architecture providing vendor-independent access to the Ada Library Environment. It allows for the static analysis of Ada programs and libraries. It is an open, published interface library that consists of the Ada environment and their tools and applications. As explained by the ASIS Working Group: “ASIS is an interface between an Ada environment as defined by ISO/IEC 8652:1995 (the Ada Reference Manual) and any tool requiring information from this environment” (SIGAda, 2020) It is exclusively used for programming language applications and static analysis on Ada programs, therefore giving the relevant information and access to Computer-aided software engineering (CASE) and applicable developers. ASIS also has the ability in utilizing the relevant software engineering tools whilst also embodying an easy understanding of the complexities of an Ada environment display. In addition, it provides procedures, functions and relevant information that can be significantly used to access exclusive information found in reference manuals and the Abstract Syntax Tree (AST). Which in return will advance ASIS to the capability of being portable to transport and retain information and terminology of Ada tools.[1] “ASIS consists of 21 packages, 2 are optional and within these packages define 349 queries”.[2] ASIS will also consist of a package which within it includes child packages that include “Errors Compilation units, Ada environments, implementation, exceptions, elements, iterator, declarations, expressions, clauses, definitions, statements, text and Ids”.[3]  Overall ASIS is simply a straightforward way to collect data from an ADA program and increases any of the Ada tools portability.Ada Semantic Interphase Specification under the ISO/IEC 8652 Ada 95 Reference Manual (Ada Language Referencing Manual, 1994) is defined as an interface amidst an Aria environment and other tools requiring information from the Aria environment. Features of ASIS based tools could include:[4] ASIS also provides limited approaches to the structural and semantic information that are found in the Ada library, it aims to provide and produce information that is similar if not the exact same semantic level as the definition of Ada. This will greatly assist in providing the exact same definitions and information of the Reference Manual for the Ada Programming Language (LRM) to interested individuals and clients (Ehrenfried). In ASIS, there are 3 main abstractions that exist in the Ada 'private' types. This consists of Context, Compilation_Unit and Element.[5] While there are additional types of abstractions also involved but the 3 mentioned are the fundamentals. The Context abstraction of ASIS consists of the definitions, terms and conditions that are available in ASIS enquiries. It is also used as a way and logical handle for the Ada environment.[4]The Compilation Unit is also a logical handle for the Ada environment. This abstraction also defines the properties and characteristics which are further seen in the Ada Reference Manual. It uses Ada's programming language implementation to convey compilation units through ASIS. As said by Adacore; "An ASIS Compilation_Unit provides the ‘black-box’ view of a compilation unit, considering the unit as a whole. It may be decomposed into ASIS Elementand then analyzed in ‘white-box’ fashion."[4] Examplies of these properties given can include: Comparably the Element abstraction is also a logical handle to the Compilation Unit discussed above, this can either be explicit or implicit. The ASIS application structure can be categorized into 3 categories; Setup ASIS Analysis, Process Compilation Units and Complete ASIS Analysis. This structure is to help in supporting various code analysis programs that appear in the Ada programming language.[3] The first step to the structure of ASIS analysis is to set it up efficiently. During this step, various tasks and programs are initialised and established. For example, as identified by William Colket (1999), this step is when the ASIS program initializes ASIS, establishes ASIS context and state object, associates the ASIS Context with the analysis, opens the ASIS context, and performs any pre-processing needed to support the ASIS analysis. The first step is generally to get the ASIS analysis up and running and be ready to use efficiently and effectively. The setup is then followed by "processing compilation units", during this time is when elements are sampled and analysed to fit into the ASIS Context that had been opened and associated with at the beginning of the ASIS structure. During this step, it mainly processes most of the ASIS application elements in correlation with the ASIS context, it also has the added capability to perform compilation units before and after processing has been done. The last and final stage of the ASIS structure is the completion of ASIS analysis. This is where everything is finalised and reviewed to perform any post processing to the ASIS analysis. The ASIS context is also closed and disassociated and ASIS is eventually finalised. As ASIS continues to evolve similarly so does the evolution of its design criteria. The criteria for how ASIS can be designed can be sorted into 9 different categories; wide acceptance, transportability, uniformity and cohesiveness, implementability, state of technology, extensibility, ada terminology and style, performance and minimal set of interfaces.[6] It must be designed according to this criteria so that a wide variety of tools can be used for ASIS. Designing it with this allows the interface library to be more flexible and available for tools across other platforms, Ada vendor implementations. It also allows for it to reduce training time for tool users and developers. ASIS must also be designed so it has the capability to be transferred from one computer to another computer or another environment to another. It should also be consistent in properties, concepts, types and operations but also be kept as a simple and coherent operation. ASIS is also criticised so that it is "implementable by any Ada Compiler Vendor with a reasonable effort".[4] As well as maintaining consistency throughout the whole program. The state of technology must always be updated and advanced to ensure no issues take place. Additionally, it should be ensured that all possible variations and versions of ASIS will be coherent and efficient. "It should not preclude extensions that will make use of the ASIS design model and abstractions."[4] ASIS should also adapt to the terms and conditions of style and definitions to the Ada Reference Manual. "ASIS design must allow for efficiency from both the client view and implementation view"[4] "It should allow clients to implement additional layered interfaces using the primitive operations provided." ASIS has been used by Adacore to implement an ASIS standard in the utilisation of ASIS-for-GNAT applications. ASIS can be used for GNAT through typical applications such as: “Static Analysis (property verification), Code instrumentation, Design and document generation tools, Metric testing or timing tools, Dependency Tree Analysis Tools, Type Dictionary Generators, Coding standards Enforcement Tools, Language Translators, Quality Assessment Tools, Source Browsers and Formatters and Syntax Directed Editors” (ASIS for GNAT). This use has also been able to develop numerous amounts of tools with the assistance of ASIS including Pace Drury (1999) utilises ASIS to create a code for his project named ‘SIDPERS-3’ where the code is used to identify intimate details and variations seen in Commercial Off the Shelf (COTS) generated from data base interaction Drury used ASIS for his project where ASIS created a new layer of Ada code which successfully insulated the software developer from the same generated Ada code specifics.[7] Having written such a difficult code called ‘generate_db_support_code’ which majorly consisted of Ada code, the aim of it were to open 2 files, examine contents and create two new files based on the prior 2 files. ASIS had been used to examine the structure of the code efficiently, making it easier to store and link to a list containing Ada language. ASIS coherently completes what is asked to do and successfully gains constant and secure access to the data base information which meets the project’s needs. AdaControl is a free (GMGPL) tool that detects the use of various kinds of constructs in Ada programs. Its uses include checking of coding standards, exploring the use of Ada features, making statistics, and more. It exploits all the power of ASIS, and can be considered as the most typical ASIS application.