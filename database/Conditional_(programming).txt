computer science conditionals conditional statement conditional expression conditional construct programming language command handling decision specifically conditionals perform different computation action depending whether programmer-defined boolean condition evaluates true false term control flow decision always achieved selectively altering control flow based condition apart case branch predication although dynamic dispatch usually classified conditional construct another way select alternative runtime imperative programming language term conditional statement usually used whereas functional programming term conditional expression conditional construct preferred term distinct meaning the if–then construct sometimes called if–then–else common across many programming language although syntax varies language language basic structure pseudocode form look like for example example code part represented boolean condition constitutes conditional expression intrinsic value e.g. may substituted either value true false intrinsic meaning contrast combination expression then surrounding consequent follows afterward constitute conditional statement intrinsic meaning e.g. expressing coherent logical rule intrinsic value when interpreter find expects boolean condition example mean variable contains number greater zero evaluates condition condition true statement following executed otherwise execution continues following branch either else block usually optional else branch end after either branch executed control return point end early programming language especially dialect basic home computer if–then statement could contain goto statement equivalent branch instruction this led hard-to-read style programming known spaghetti programming program style called spaghetti code result structured programming allows virtually arbitrary statement put statement block inside statement gained popularity became norm even basic programming circle such mechanism principle based older advanced algol family language algol-like language pascal influenced modern basic variant many year while possible using goto statement if–then statement write program spaghetti code well structured readable program written structured programming language structured programming make easier enforces structured if–then–else statement like example one key element structured programming present popular high-level programming language java javascript visual basic the else keyword made target specific if–then statement preceding nested if–then statement classic programming language algol struggled define specific statement target without clear boundary statement else keyword could target preceding if–then statement nest parsed parsed depending whether else associated first second this known dangling else problem resolved various way depending language commonly via end statement ... bracket using else possible combine several condition only statement following first condition found true executed all statement skipped for example shop offering much discount item example discount first statement evaluated true pay printed all statement first statement skipped the elseif statement ada language example simply syntactic sugar else followed ada difference one end needed one us elseif instead else followed php us elseif keyword curly bracket colon syntax perl provides keyword elsif avoid large number brace would required multiple else statement python us special keyword elif structure denoted indentation rather brace repeated use else would require increased indentation every condition some implementation basic visual basic use elseif similarly earlier unix shell later gathered posix shell syntax use elif giving choice delimiting space line break however many language directly descended algol simula pascal bcpl special syntax else construct present present many syntactical derivative java ecmascript this work language single statement case cond ... follow conditional without enclosed block this design choice slight cost each else branch effectively add extra nesting level this complicates job compiler people write compiler compiler must analyse implement arbitrarily long else chain recursively term sequence conditionals testing value single expression e.g. ... else ... else ... alternative switch statement also called case-statement select-statement conversely language switch statement produced sequence else statement many language support expression similar statement return value result thus true expression evaluate value statement may permitted context value algol member algol family allow if–then–else expression dialect lisp scheme racket common lisp first inspired great extent algol haskell expression statement else part compulsory every expression must value logic would expressed conditionals language usually expressed pattern matching recursive function because haskell lazy possible write control structure ordinary expression lazy evaluation mean function evaluate condition proper branch strict language would evaluate three written like c-like language special ternary operator conditional expression function may described template like this mean inlined expression unlike if-statements c-like language compared algol-family if–then–else expression contrast statement similar ruby scala among others accomplish using if-statement would take one line code typical layout convention require mentioning my_variable twice some argue explicit if/then statement easier read may compile efficient code ternary operator others argue concise expression easier read statement spread several line containing repetition first user run program cursor appears waiting reader type number number greater text variable named 'foo displayed screen number smaller message variable named 'bar printed screen visual basic language function called iif provided used conditional expression however behave like true conditional expression true false branch always evaluated result one thrown away result returned iif function tcl keyword function tcl known command proc for example invokes function named passing argument the first one condition second one true branch both argument passed string tcl everything within curly bracket string example condition evaluated calling function instead implementation function receives condition string value responsible evaluate string expression caller scope such behavior possible using uplevel expr command because actually function also return value rust always expression evaluates value whichever branch executed unit type branch executed branch provide return value evaluates default ensure expression type known compile time branch must evaluate value type for reason else branch effectively compulsory unless branch evaluate without else always evaluate default fortran language fortran arithmetic statement halfway computed case statement based trichotomy this earliest conditional statement fortran where numeric expression necessarily integer equivalent because arithmetic equivalent multiple goto statement could jump anywhere considered unstructured control statement used structured statement used practice observed arithmetic statement referenced following statement one two label this conditional control statement original implementation fortran ibm computer computer test-and-branch op-code three address three state other computer would flag register positive zero negative even overflow carry associated last arithmetic operation would use instruction 'branch accumulator negative 'branch accumulator zero similar note expression evaluated case integer arithmetic overflow may occur overflow carry flag would considered also contrast language smalltalk conditional statement language construct defined class boolean abstract method take two parameter closure boolean two subclass true false define method true executing first closure false executing second closure javascript us if-else statement similar language similar boolean value accepted within parenthesis reserved keyword left curly bracket the example take conditional math.random output true random float value greater the statement us randomly choose outputting you got head you got tail console else else-if statement also chained curly bracket statement preceding many time necessary shown lambda calculus concept if-then-else conditional expressed using expression note ifthenelse passed two function left right conditionals necessary also pas empty tuple result ifthenelse order actually call chosen function otherwise ifthenelse return function object without getting called system number used without definition like lisp traditional paper math expressed single closure here true false ifthenelse bound respective definition passed scope end block working javascript analogy using function single variable rigor the code multivariable function look like another version earlier example without system number assumed first example show first branch taken second example show second branch taken smalltalk us similar idea true false representation true false singleton object respond message iftrue/iffalse differently haskell used use exact model boolean type time writing haskell program use syntactic sugar else construct unlike ifthenelse compose unless either wrapped another function re-implemented shown the haskell section page switch statement language case statement multiway branch compare given value specified constant take action according first constant match there usually provision default action 'else 'otherwise taken match succeeds switch statement allow compiler optimization lookup table dynamic language case may limited constant expression might extend pattern matching shell script example right implement default case regular expression matching string pattern matching may seen alternative if–then–else case statement available many programming language functional programming feature wolfram language many others here simple example written ocaml language the power pattern matching ability concisely match action also value pattern data here example written haskell illustrates feature this code defines function map applies first argument function element second argument list return resulting list the two line two definition function two kind argument possible case one list empty return empty list case list empty pattern matching strictly speaking always choice construct possible haskell write one alternative guaranteed always matched situation used choice construct simply way bind name value however frequently used choice construct language available programming language associative array comparable data structure python perl php objective-c idiomatic use implement conditional assignment language anonymous function allow programmer assign named function variable reference conditional flow implemented using hash dispatch table alternative conditional branch instruction predication predication architectural feature enables instruction conditionally executed instead modifying control flow this table refers recent language specification language for language specification latest officially released implementation referred