computer programming process performing particular computation generally accomplishing specific computing result usually designing building executable computer program programming involves task analysis generating algorithm profiling algorithm accuracy resource consumption implementation algorithm usually chosen programming language commonly referred coding the source code program written one language intelligible programmer rather machine code directly executed central processing unit the purpose programming find sequence instruction automate performance task complex operating system computer often solving given problem proficient programming thus usually requires expertise several different subject including knowledge application domain specialized algorithm formal logic task accompanying related programming include testing debugging source code maintenance implementation build system management derived artifact machine code computer program these might considered part programming process often term software development used larger process term programming implementation coding reserved actual writing code software engineering combine engineering technique software development practice reverse engineering related process used designer analyst programmer understand existing program re-implement function programmable device existed century early century programmable music sequencer invented persian banu musa brother described automated mechanical flute player book ingenious device arab engineer al-jazari invented programmable drum machine musical mechanical automaton could made play different rhythm drum pattern via peg cam jacquard loom could produce entirely different weave changing program series pasteboard card hole punched code-breaking algorithm also existed century century arab mathematician al-kindi described cryptographic algorithm deciphering encrypted code manuscript deciphering cryptographic message gave first description cryptanalysis frequency analysis earliest code-breaking algorithm the first computer program generally dated mathematician ada lovelace published algorithm calculate sequence bernoulli number intended carried charles babbage analytical engine herman hollerith invented concept storing data machine-readable form later control panel plug board added type tabulator allowed programmed different job late unit record equipment ibm ibm programmed control panel similar way first electronic computer however concept stored-program computer introduced program data stored manipulated way computer memory machine code language early program written instruction set particular machine often binary notation assembly language soon developed let programmer specify instruction text format e.g. add total abbreviation operation code meaningful name specifying address however assembly language little different notation machine language two machine different instruction set also different assembly language high-level language made process developing program simpler understandable le bound underlying hardware the first compiler related tool system developed grace hopper also coined term 'compiler fortran first widely used high-level language functional implementation came many language soon developedâ€”in particular cobol aimed commercial data processing lisp computer research these compiled language allow programmer write program term syntactically richer capable abstracting code making easy target varying machine instruction set via compilation declaration heuristic compiler harnessed power computer make programming easier allowing programmer specify calculation entering formula using infix notation program mostly entered using punched card paper tape late data storage device computer terminal became inexpensive enough program could created typing directly computer text editor also developed allowed change correction made much easily punched card whatever approach development may final program must satisfy fundamental property the following property among important computer programming readability refers ease human reader comprehend purpose control flow operation source code affect aspect quality including portability usability importantly maintainability readability important programmer spend majority time reading trying understand reusing modifying existing source code rather writing new source code unreadable code often lead bug inefficiency duplicated code study found simple readability transformation made code shorter drastically reduced time understand following consistent programming style often help readability however readability programming style many factor little nothing ability computer efficiently compile execute code contribute readability some factor include the presentation aspect indent line break color highlighting often handled source code editor content aspect reflect programmer talent skill various visual programming language also developed intent resolve readability concern adopting non-traditional approach code structure display integrated development environment ides aim integrate help technique like code refactoring enhance readability the academic field engineering practice computer programming largely concerned discovering implementing efficient algorithm given class problem for purpose algorithm classified order using so-called big notation express resource use execution time memory consumption term size input expert programmer familiar variety well-established algorithm respective complexity use knowledge choose algorithm best suited circumstance the first step formal software development process requirement analysis followed testing determine value modeling implementation failure elimination debugging there exist lot different approach task one approach popular requirement analysis use case analysis many programmer use form agile software development various stage formal software development integrated together short cycle take week rather year there many approach software development process popular modeling technique include object-oriented analysis design ooad model-driven architecture mda the unified modeling language uml notation used ooad mda similar technique used database design entity-relationship modeling modeling implementation technique include imperative language object-oriented procedural functional language logic language difficult determine popular modern programming language method measuring programming language popularity include counting number job advertisement mention language number book sold course teaching language overestimate importance newer language estimate number existing line code written language underestimate number user business language cobol some language popular particular kind application language regularly used write many different kind application for example cobol still strong corporate data center often large mainframe computer fortran engineering application scripting language web development embedded software many application use mix several language construction use new language generally designed around syntax prior language new functionality added example c++ add object-orientation java add memory management bytecode c++ result loses efficiency ability low-level manipulation debugging important task software development process since defect program significant consequence user some language prone kind fault specification require compiler perform much checking language use static code analysis tool help detect possible problem normally first step debugging attempt reproduce problem this non-trivial task example parallel process unusual software bug also specific user environment usage history make difficult reproduce problem after bug reproduced input program may need simplified make easier debug for example bug compiler make crash parsing large source file simplification test case result line original source file sufficient reproduce crash trial-and-error/divide-and-conquer needed programmer try remove part original test case check problem still exists when debugging problem gui programmer try skip user interaction original problem description check remaining action sufficient bug appear scripting breakpointing also part process debugging often done ides standalone debugger like gdb also used often provide le visual environment usually using command line some text editor emacs allow gdb invoked provide visual environment different programming language support different style programming called programming paradigm the choice language used subject many consideration company policy suitability task availability third-party package individual preference ideally programming language best suited task hand selected trade-off ideal involve finding enough programmer know language build team availability compiler language efficiency program written given language execute language form approximate spectrum low-level high-level low-level language typically machine-oriented faster execute whereas high-level language abstract easier use execute le quickly usually easier code high-level language low-level one programming language essential software development they building block software simplest application sophisticated one allen downey book how think like computer scientist writes many computer language provide mechanism call function provided shared library provided function library follow appropriate run-time convention e.g. method passing argument function may written language computer programmer write computer software their job usually involve although programming presented medium somewhat mathematical subject research show good programmer strong skill natural human language learning code similar learning foreign language better source needed