swift general-purpose multi-paradigm compiled programming language developed apple inc. open-source community first released swift developed replacement apple earlier programming language objective-c objective-c largely unchanged since early lacked modern language feature swift work apple cocoa cocoa touch framework key aspect swift design ability interoperate huge body existing objective-c code developed apple product previous decade built open source llvm compiler framework included xcode since version released apple platform us objective-c runtime library allows objective-c c++ swift code run within one program apple intended swift support many core concept associated objective-c notably dynamic dispatch widespread late binding extensible programming similar feature safer way making easier catch software bug swift feature addressing common programming error like null pointer dereferencing provides syntactic sugar help avoid pyramid doom swift support concept protocol extensibility extensibility system applied type structs class apple promotes real change programming paradigm term protocol-oriented programming similar trait swift introduced apple worldwide developer conference wwdc underwent upgrade version major upgrade swift wwdc initially proprietary language version made open-source software apache license december apple platform linux through version syntax swift went significant evolution core team making source stability focus later version first quarter swift surpassed objective-c measured popularity swift released introduced several change built-in class structure code written previous version swift updated using migration functionality built xcode swift released march introduced stable binary interface apple platform allowing swift runtime incorporated apple operating system source compatible swift swift officially released september swift build previous version swift extending stable feature language compile-time introduction module stability the introduction module stability make possible create share binary framework work future release swift swift officially announced apple wwdc significantly expands language support concurrency asynchronous code notably introducing unique version actor model development swift started july chris lattner eventual collaboration many programmer apple swift took language idea objective-c rust haskell ruby python clu far many others list june apple worldwide developer conference wwdc application became first publicly released app written swift beta version programming language released registered apple developer conference company promise final version swift would source code compatible test version apple planned make source code converter available needed full release the swift programming language free manual also released wwdc available apple book store official website swift reached milestone september gold master xcode io swift released october alongside launch xcode swift released april along xcode swift announced wwdc made available publishing apps app store september swift released september swift released september swift released march swift first place most loved programming language stack overflow developer survey second place december swift language supporting library debugger package manager open-sourced apache license runtime library exception swift.org created host project the source code hosted github easy anyone get code build even create pull request contribute code back project december ibm announced swift sandbox website allows developer write swift code one pane display output another the swift sandbox deprecated january during wwdc apple announced ipad exclusive app named swift playground intended teach people code swift the app presented video game-like interface provides feedback line code placed certain order executed january chris lattner announced departure apple new position tesla motor swift project lead role going team veteran ted kremenek during wwdc apple announced swiftui xcode provides framework declarative structure design across apple platform official downloads ubuntu distribution linux available since swift distros added since swift centos amazon linux there unofficial sdk native toolchain package android the platform swift support apple operating system darwin io ipados macos tvos watchos linux window android swift alternative objective-c language employ modern programming-language theory concept strives present simpler syntax during introduction described simply objective-c without baggage default swift expose pointer unsafe accessors contrast objective-c us pointer pervasively refer object instance also objective-c use smalltalk-like syntax making method call replaced dot-notation style namespace system familiar programmer common object-oriented language like java swift introduces true named parameter retains key objective-c concept including protocol closure category often replacing former syntax cleaner version allowing concept applied language structure like enumerated type enums swift support closure known lambda language clarification needed closure self-contained block functionality passed around used code also used anonymous function here example swift also trailing closure syntax look like starting version swift support multiple trailing closure here criterion trailing closure syntax under cocoa cocoa touch environment many common class part foundation kit library this included nsstring string library using unicode swift changed nsarray nsdictionary collection class others objective-c provided various bit syntactic sugar allow object created on-the-fly within language created object manipulated object call for instance objective-c concatenating two nsstrings required method call similar swift many basic type promoted language core manipulated directly for instance string invisibly bridged nsstring foundation imported concatenated operator allowing greatly simplified syntax prior example becoming swift support five access control level symbol open public internal fileprivate private unlike many object-oriented language access control ignore inheritance hierarchy private indicates symbol accessible immediate scope fileprivate indicates accessible within file internal indicates accessible within containing module public indicates accessible module open class method indicates class may subclassed outside module important new feature swift option type allow reference value operate manner similar common pattern pointer may refer value may null this implies non-optional type result null-pointer error compiler ensure possible optional type created optional mechanismâ€”to make integer nullable one would use declaration similar var optionalinteger optional int swift also includes syntactic sugar allowing one indicate variable optional placing question mark type name var optionalinteger int variable constant marked optional either value underlying type nil optional type wrap base type resulting different instance string string fundamentally different type latter common int string access value inside assuming nil must unwrapped expose instance inside this performed operator case operator unwraps anoptionalinstance expose instance inside allowing method call made anoptionalinstance nil null-pointer error occurs this annoying practice swift also includes concept optional chaining test whether instance nil unwrap non-null case runtime call somemethod anoptionalinstance nil suppressing error normally requires programmer test whether myvalue nil proceeding the origin term chaining come common case several method calls/getters chained together for instance reduced the syntax circumvents pyramid doom swift introduced new keyword guard case code stop executing condition unmet using guard three benefit while syntax act statement primary benefit inferring non-nullability where statement requires case guard assumes case based condition provided also since guard contains scope exception else closure leasestart presented unwrapped optional guard super-scope lastly guard statement test fails swift requires else exit current method loop ensuring leasestart never accessed nil this performed keywords return continue break throw calling function returning never e.g fatalerror objective-c weakly typed allowed method called object time method call failed default handler runtime returned nil that meant unwrapping testing needed equivalent statement objective-c would return nil could tested however also demanded method call dynamic introduces significant overhead swift use optionals provides similar mechanism testing dealing nil way allows compiler use static dispatch unwrapping action called defined instance wrapper versus occurring runtime dispatch system many object-oriented language object represented internally two part the object stored block data placed heap name handle object represented pointer object passed method copying value pointer allowing underlying data heap accessed anyone copy contrast basic type like integer floating-point value represented directly handle contains data pointer data passed directly method copying these style access termed pass-by-reference case object pass-by-value basic type both concept advantage disadvantage object useful data large like description window content document case access data provided copying value versus copying entire data structure however smaller value like integer size pointer typically one word advantage passing pointer versus passing value also pass-by-reference inherently requires dereferencing operation produce noticeable overhead operation typically used basic value type like mathematics similarly contrast language citation needed swift offer built-in support object using either pass-by-reference pass-by-value semantics former using class declaration latter using struct structs swift almost feature class method implementing protocol using extension mechanism for reason apple term data generically instance versus object value structs support inheritance however the programmer free choose semantics appropriate data structure application larger structure like window would defined class allowing passed around pointer smaller structure like point defined structs pass-by-value allow direct access internal data dereference the performance improvement inherent pass-by-value concept swift us type almost common data type including int double type normally represented object like string array using value type result significant performance improvement user application well ensure even largest structs cause performance penalty handed swift us copy write object copied program attempt change value this mean various accessors effect pointer data storage data physically stored one instance memory level application value separate physical separation enforced copy write needed key feature objective-c support category method added extend class runtime category allow extending class in-place add new function need subclass even access original source code example might add spell checker support base nsstring class mean instance nsstring application gain spell checking the system also widely used organizational technique allowing related code gathered library-like extension swift continues support concept although termed extension declared keyword extension unlike objective-c swift also add new property accessors type enums extant instance citation needed another key feature objective-c use protocol known modern language interface protocol promise particular class implement set method meaning object system call method object supporting protocol this often used modern language substitute multiple inheritance although feature set entirely similar common example protocol cocoa nscopying protocol defines one method copywithzone implement deep copying object objective-c language implementing protocol concept programmer ensure required method implemented class swift add ability add method using extension use generic programming generic implement combined allow protocol written support wide variety instance also extension mechanism used add protocol conformance object list protocol definition for example protocol might declared called stringconvertible ensures instance conform protocol implement tostring method return string swift declared code like this protocol added string access base class source swift like many modern language supporting interface protocol used type mean variable method defined protocol instead specific type matter sort instance somesortofprintableobject compiler ensure conforms protocol thus code safe this syntax also mean collection based protocol also like let printablearray stringconvertible swift treat structs class similar concept extension protocol extensively used swift runtime provide rich api based structs for instance swift us extension add equatable protocol many basic type like string array allowing compared operator concrete example feature interact seen concept default protocol implementation this function defines method work instance conforming equatable providing equal function any instance class struct automatically gain implementation simply conforming equatable many instance gain equatable base implementation generic extension basic object runtime gain equal equal code this combination protocol default protocol inheritance extension allows many function normally associated class inheritance implemented value type properly used lead dramatic performance improvement significant limit api this concept widely used within swift apple begun calling protocol-oriented programming language they suggest addressing many problem domain normally solved class inheritance using protocol structs instead apple system swift us runtime extant objective-c system requires io macos higher also depends grand central dispatch swift objective-c code used one program extension c++ also contrast c++ code used directly swift objective-c wrapper must created swift c++ case objective-c swift considerable access object model used subclass extend use objective-c code provide protocol support the converse true swift class subclassed objective-c. aid development program re-use extant code xcode higher offer semi-automated system build maintains bridging header expose objective-c code swift this take form additional header file simply defines import objective-c symbol needed project swift code point swift refer type function variable declared import though written swift objective-c code also use swift code directly importing automatically maintained header file objective-c declaration project swift symbol for instance objective-c file mixed project called myapp could access swift class function code import myapp-swift.h not symbol available mechanism howeverâ€”use swift-specific feature like generic type non-object optional type sophisticated enums even unicode identifier may render symbol inaccessible objective-c. swift also limited support attribute metadata read development environment necessarily part compiled code like objective-c attribute use syntax currently available set small one example iboutlet attribute mark given value code outlet available use within interface builder outlet device bind value on-screen display object code non-apple system swift depend objective-c runtime apple system library set swift corelib implementation replace these include swift-corelibs-foundation stand foundation kit swift-corelibs-libdispatch stand grand central dispatch swift-corelibs-xctest stand xctest apis xcode xcode apple also added major new paradigm called swiftui swiftui replaces older interface builder paradigm new declarative development paradigm swift us automatic reference counting arc manage memory apple used require manual memory management objective-c introduced arc allow easier memory allocation deallocation one problem arc possibility creating strong reference cycle object reference way reach object started following reference e.g reference reference this cause become leaked memory never released swift provides keywords weak unowned prevent strong reference cycle typically parent-child relationship would use strong reference child-parent would use either weak reference parent child unrelated unowned child always parent parent may child weak reference must optional variable since change become nil closure within class also create strong reference cycle capturing self reference self reference treated weak unowned indicated using capture list key element swift system ability cleanly debugged run within development environment using readâ€“evalâ€“print loop repl giving interactive property common scripting ability python traditional system programming language the repl enhanced playground interactive view running within xcode environment respond code debugger change on-the-fly playground allow programmer add swift code along markdown documentation code change time regard ranged input value view used timeline assistant demonstrate output animated way addition xcode debugging feature swift development including breakpoints step step statement well element placement breakdown app developer apple say swift industrial-quality programming language expressive enjoyable scripting language many feature introduced swift well-known performance safety trade-off apple implemented optimization reduce overhead swift considered family programming language similar various way also similarity objective-c difference objective-c include since language open-source prospect ported web some web framework already developed ibm kitura perfect vapor official server apis work group also started apple member swift developer community playing central role second free implementation swift target cocoa microsoft common language infrastructure .net java android platform exists part element compiler remobjects software combining toolchains llvm macintosh programmer workshop possible run small subset language mac